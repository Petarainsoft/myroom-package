import { PrismaClient } from '@prisma/client';
import { execSync } from 'child_process';
import * as fs from 'fs';
import * as path from 'path';

const prisma = new PrismaClient();

/**
 * Script ƒë·ªÉ rollback migration t·ª´ Developer v·ªÅ Customer
 * C·∫¢NH B√ÅO: Script n√†y s·∫Ω l√†m m·∫•t d·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o sau migration
 */
async function runRollback() {
  console.log('‚ö†Ô∏è  C·∫¢NH B√ÅO: ROLLBACK MIGRATION');
  console.log('================================');
  console.log('Script n√†y s·∫Ω rollback database t·ª´ Developer v·ªÅ Customer');
  console.log('T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c t·∫°o sau migration s·∫Ω b·ªã m·∫•t!');
  console.log('');
  
  // Confirm rollback
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  const answer = await new Promise<string>((resolve) => {
    readline.question('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën rollback? (yes/no): ', resolve);
  });
  
  readline.close();
  
  if (answer.toLowerCase() !== 'yes') {
    console.log('‚ùå Rollback ƒë√£ b·ªã h·ªßy');
    return;
  }
  
  try {
    console.log('\nüîÑ B·∫Øt ƒë·∫ßu rollback...');
    
    // 1. Backup current state
    console.log('\nüì¶ T·∫°o backup tr∆∞·ªõc khi rollback...');
    const backupFile = `backup_before_rollback_${new Date().toISOString().replace(/[:.]/g, '-')}.sql`;
    
    try {
      execSync(`docker exec myroom-postgres pg_dump -U myroom_user myroom_db > ${backupFile}`, {
        stdio: 'inherit'
      });
      console.log(`‚úÖ Backup ƒë√£ ƒë∆∞·ª£c t·∫°o: ${backupFile}`);
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Kh√¥ng th·ªÉ t·∫°o backup: ${error}`);
      console.log('Ti·∫øp t·ª•c rollback...');
    }
    
    // 2. Disconnect Prisma
    console.log('\nüîå Ng·∫Øt k·∫øt n·ªëi Prisma...');
    await prisma.$disconnect();
    
    // 3. Run rollback SQL script
    console.log('\nüóÑÔ∏è  Ch·∫°y rollback SQL script...');
    const rollbackScriptPath = path.join(__dirname, 'rollback-migration.sql');
    
    if (!fs.existsSync(rollbackScriptPath)) {
      throw new Error(`Kh√¥ng t√¨m th·∫•y rollback script: ${rollbackScriptPath}`);
    }
    
    execSync(`docker exec -i myroom-postgres psql -U myroom_user -d myroom_db < ${rollbackScriptPath}`, {
      stdio: 'inherit'
    });
    
    console.log('‚úÖ Rollback SQL script ƒë√£ ho√†n th√†nh');
    
    // 4. Instructions for manual steps
    console.log('\nüìã C√ÅC B∆Ø·ªöC TI·∫æP THEO C·∫¶N TH·ª∞C HI·ªÜN TH·ª¶ C√îNG:');
    console.log('==========================================');
    console.log('1. C·∫≠p nh·∫≠t Prisma schema:');
    console.log('   - ƒê·ªïi model Developer th√†nh Customer');
    console.log('   - ƒê·ªïi t·∫•t c·∫£ developer_id th√†nh customer_id');
    console.log('   - C·∫≠p nh·∫≠t relationships');
    console.log('');
    console.log('2. Regenerate Prisma client:');
    console.log('   npx prisma generate');
    console.log('');
    console.log('3. C·∫≠p nh·∫≠t code:');
    console.log('   - API routes (developer.ts -> customer.ts)');
    console.log('   - Middleware authentication');
    console.log('   - Services v√† controllers');
    console.log('   - Swagger documentation');
    console.log('');
    console.log('4. Restart application:');
    console.log('   npm run dev');
    console.log('');
    console.log('üéâ ROLLBACK HO√ÄN TH√ÄNH!');
    console.log('Database ƒë√£ ƒë∆∞·ª£c rollback v·ªÅ Customer-based system');
    
  } catch (error) {
    console.error('‚ùå ROLLBACK TH·∫§T B·∫†I!');
    console.error('L·ªói:', error);
    
    if (error instanceof Error) {
      console.error('Chi ti·∫øt:', error.message);
    }
    
    console.log('\nüîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:');
    console.log('1. Ki·ªÉm tra Docker containers ƒëang ch·∫°y');
    console.log('2. Ki·ªÉm tra k·∫øt n·ªëi database');
    console.log('3. Ki·ªÉm tra file rollback-migration.sql');
    console.log('4. Restore t·ª´ backup n·∫øu c·∫ßn thi·∫øt');
    
    process.exit(1);
  }
}

/**
 * Ki·ªÉm tra prerequisites
 */
function checkPrerequisites() {
  console.log('üîç Ki·ªÉm tra prerequisites...');
  
  try {
    // Ki·ªÉm tra Docker
    execSync('docker --version', { stdio: 'pipe' });
    console.log('‚úÖ Docker available');
    
    // Ki·ªÉm tra PostgreSQL container
    execSync('docker exec myroom-postgres pg_isready -U myroom_user', { stdio: 'pipe' });
    console.log('‚úÖ PostgreSQL container running');
    
    // Ki·ªÉm tra rollback script
    const rollbackScriptPath = path.join(__dirname, 'rollback-migration.sql');
    if (fs.existsSync(rollbackScriptPath)) {
      console.log('‚úÖ Rollback script found');
    } else {
      throw new Error('Rollback script not found');
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Prerequisites check failed:', error);
    return false;
  }
}

// Main execution
async function main() {
  console.log('üîÑ Database Rollback Script');
  console.log('===========================\n');
  
  // Check prerequisites
  if (!checkPrerequisites()) {
    console.log('\n‚ùå Prerequisites kh√¥ng ƒë·ªß. Vui l√≤ng ki·ªÉm tra:');
    console.log('1. Docker ƒëang ch·∫°y');
    console.log('2. PostgreSQL container ƒëang ho·∫°t ƒë·ªông');
    console.log('3. File rollback-migration.sql t·ªìn t·∫°i');
    process.exit(1);
  }
  
  await runRollback();
}

// Ch·∫°y script
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
}

export { runRollback };