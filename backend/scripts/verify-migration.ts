import { PrismaClient } from '@prisma/client';
import { logger } from '../src/utils/logger';

const prisma = new PrismaClient();

/**
 * Script ƒë·ªÉ verify migration t·ª´ Customer sang Developer
 * Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa database sau migration
 */
async function verifyMigration() {
  console.log('üîç B·∫Øt ƒë·∫ßu ki·ªÉm tra migration...');
  
  try {
    // 1. Ki·ªÉm tra b·∫£ng developers
    console.log('\nüìã Ki·ªÉm tra b·∫£ng developers...');
    const developers = await prisma.developer.findMany();
    console.log(`‚úÖ B·∫£ng developers: ${developers.length} b·∫£n ghi`);
    
    if (developers.length > 0) {
      console.log(`   - Developer ƒë·∫ßu ti√™n: ${developers[0].email}`);
    }
    
    // 2. Ki·ªÉm tra b·∫£ng projects v√† relationship v·ªõi developer
    console.log('\nüìã Ki·ªÉm tra b·∫£ng projects...');
    const projects = await prisma.project.findMany({
      include: { 
        developer: {
          select: { id: true, email: true, name: true }
        }
      }
    });
    console.log(`‚úÖ B·∫£ng projects: ${projects.length} b·∫£n ghi`);
    
    // Ki·ªÉm tra t·∫•t c·∫£ projects ƒë·ªÅu c√≥ developer_id
    const projectsWithoutDeveloper = projects.filter(p => !p.developer);
    if (projectsWithoutDeveloper.length > 0) {
      console.warn(`‚ö†Ô∏è  ${projectsWithoutDeveloper.length} projects kh√¥ng c√≥ developer`);
    } else {
      console.log(`‚úÖ T·∫•t c·∫£ projects ƒë·ªÅu c√≥ developer`);
    }
    
    // 3. Ki·ªÉm tra API keys
    console.log('\nüìã Ki·ªÉm tra b·∫£ng api_keys...');
    const apiKeys = await prisma.apiKey.findMany({
      include: {
        project: {
          include: {
            developer: {
              select: { id: true, email: true }
            }
          }
        }
      }
    });
    console.log(`‚úÖ B·∫£ng api_keys: ${apiKeys.length} b·∫£n ghi`);
    
    // 4. Ki·ªÉm tra avatar categories v√† avatars
    console.log('\nüìã Ki·ªÉm tra b·∫£ng avatar_categories...');
    try {
      const avatarCategories = await prisma.avatarCategory.findMany();
      console.log(`‚úÖ B·∫£ng avatar_categories: ${avatarCategories.length} b·∫£n ghi`);
      
      const avatars = await prisma.avatar.findMany();
      console.log(`‚úÖ B·∫£ng avatars: ${avatars.length} b·∫£n ghi`);
    } catch (error) {
      console.log(`‚ÑπÔ∏è  Avatar tables ch∆∞a ƒë∆∞·ª£c t·∫°o ho·∫∑c c√≥ l·ªói: ${error}`);
    }
    
    // 5. Ki·ªÉm tra room categories v√† rooms
    console.log('\nüìã Ki·ªÉm tra b·∫£ng room_categories...');
    try {
      const roomCategories = await prisma.roomCategory.findMany();
      console.log(`‚úÖ B·∫£ng room_categories: ${roomCategories.length} b·∫£n ghi`);
      
      const rooms = await prisma.room.findMany();
      console.log(`‚úÖ B·∫£ng rooms: ${rooms.length} b·∫£n ghi`);
    } catch (error) {
      console.log(`‚ÑπÔ∏è  Room tables ch∆∞a ƒë∆∞·ª£c t·∫°o ho·∫∑c c√≥ l·ªói: ${error}`);
    }
    
    // 6. Ki·ªÉm tra foreign key constraints
    console.log('\nüìã Ki·ªÉm tra foreign key constraints...');
    
    // Test t·∫°o project m·ªõi v·ªõi developer
    if (developers.length > 0) {
      const testProject = await prisma.project.create({
        data: {
          name: 'Test Migration Project',
          description: 'Project ƒë·ªÉ test migration',
          developer_id: developers[0].id
        }
      });
      
      console.log(`‚úÖ T·∫°o project test th√†nh c√¥ng: ${testProject.id}`);
      
      // X√≥a project test
      await prisma.project.delete({
        where: { id: testProject.id }
      });
      
      console.log(`‚úÖ X√≥a project test th√†nh c√¥ng`);
    }
    
    // 7. T·ªïng k·∫øt
    console.log('\nüéâ MIGRATION VERIFICATION TH√ÄNH C√îNG!');
    console.log('\nüìä T·ªïng k·∫øt:');
    console.log(`   - Developers: ${developers.length}`);
    console.log(`   - Projects: ${projects.length}`);
    console.log(`   - API Keys: ${apiKeys.length}`);
    console.log(`   - Foreign key constraints: ‚úÖ Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng`);
    
    // 8. Ki·ªÉm tra kh√¥ng c√≤n tham chi·∫øu customer
    console.log('\nüîç Ki·ªÉm tra kh√¥ng c√≤n tham chi·∫øu "customer"...');
    
    // Ki·ªÉm tra trong database metadata
    const customerTables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name LIKE '%customer%'
    ` as any[];
    
    const customerColumns = await prisma.$queryRaw`
      SELECT table_name, column_name 
      FROM information_schema.columns 
      WHERE column_name LIKE '%customer%'
    ` as any[];
    
    if (customerTables.length === 0 && customerColumns.length === 0) {
      console.log(`‚úÖ Kh√¥ng c√≤n tham chi·∫øu "customer" trong database`);
    } else {
      console.warn(`‚ö†Ô∏è  V·∫´n c√≤n tham chi·∫øu "customer":`);
      if (customerTables.length > 0) {
        console.warn(`   Tables: ${customerTables.map(t => t.table_name).join(', ')}`);
      }
      if (customerColumns.length > 0) {
        console.warn(`   Columns: ${customerColumns.map(c => `${c.table_name}.${c.column_name}`).join(', ')}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå MIGRATION VERIFICATION TH·∫§T B·∫†I!');
    console.error('L·ªói:', error);
    
    if (error instanceof Error) {
      console.error('Chi ti·∫øt l·ªói:', error.message);
      console.error('Stack trace:', error.stack);
    }
    
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Ki·ªÉm tra k·∫øt n·ªëi database
 */
async function checkDatabaseConnection() {
  try {
    await prisma.$connect();
    console.log('‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng');
    return true;
  } catch (error) {
    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database:', error);
    return false;
  }
}

// Main execution
async function main() {
  console.log('üöÄ Migration Verification Script');
  console.log('================================\n');
  
  // Ki·ªÉm tra k·∫øt n·ªëi tr∆∞·ªõc
  const connected = await checkDatabaseConnection();
  if (!connected) {
    process.exit(1);
  }
  
  await verifyMigration();
}

// Ch·∫°y script
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
}

export { verifyMigration, checkDatabaseConnection };