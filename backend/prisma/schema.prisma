// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin entity for system administration
model Admin {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  passwordHash String   @map("password_hash")
  role         AdminRole @default(ADMIN)
  status       AdminStatus @default(ACTIVE)
  lastLoginAt  DateTime? @map("last_login_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  customerActions CustomerAction[]

  @@map("admins")
}

// Customer entity
model Customer {
  id           String         @id @default(cuid())
  email        String         @unique
  name         String
  passwordHash String         @map("password_hash")
  status       CustomerStatus @default(ACTIVE)
  suspendedAt  DateTime?      @map("suspended_at")
  suspendedReason String?     @map("suspended_reason")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relations
  projects     Project[]
  permissions  CustomerCategoryPermission[]
  actions      CustomerAction[]

  @@map("customers")
}

// Project entity
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  customerId  String        @map("customer_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  apiKeys  ApiKey[]

  @@map("projects")
}

// API Key entity
model ApiKey {
  id          String       @id @default(cuid())
  key         String       @unique
  name        String
  scopes      String[]     @default([])
  status      ApiKeyStatus @default(ACTIVE)
  lastUsedAt  DateTime?    @map("last_used_at")
  expiresAt   DateTime?    @map("expires_at")
  projectId   String       @map("project_id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  usage   ApiKeyUsage[]

  @@map("api_keys")
}

// Resource Category entity
model ResourceCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isPremium   Boolean  @default(false) @map("is_premium")
  price       Decimal? @db.Decimal(10, 2)
  metadata    Json?    @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  resources   Resource[]
  permissions CustomerCategoryPermission[]

  @@map("resource_categories")
}

// Resource entity
model Resource {
  id           String            @id @default(cuid())
  name         String
  description  String?
  s3Url        String            @map("s3_url")
  s3Key        String            @map("s3_key")
  fileSize     BigInt            @map("file_size")
  fileType     String            @map("file_type")
  accessPolicy ResourceAccessPolicy @default(CUSTOMERS_ONLY) @map("access_policy")
  metadata     Json?             @default("{}")
  categoryId   String            @map("category_id")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @updatedAt @map("updated_at")

  // Relations
  category ResourceCategory @relation(fields: [categoryId], references: [id])
  usage    ResourceUsage[]

  @@map("resources")
}

// Customer Category Permission entity
model CustomerCategoryPermission {
  id         String    @id @default(cuid())
  customerId String    @map("customer_id")
  categoryId String    @map("category_id")
  isPaid     Boolean   @default(false) @map("is_paid")
  paidAmount Decimal?  @db.Decimal(10, 2) @map("paid_amount")
  grantedAt  DateTime  @default(now()) @map("granted_at")
  expiredAt  DateTime? @map("expired_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")

  // Relations
  customer Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  category ResourceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([customerId, categoryId])
  @@map("customer_category_permissions")
}

// Manifest entity for 3D scene configurations
model Manifest {
  id          String      @id @default(cuid())
  name        String
  version     String      @default("1.0.0")
  description String?
  config      Json        @default("{}")
  s3Url       String?     @map("s3_url")
  s3Key       String?     @map("s3_key")
  status      ManifestStatus @default(ACTIVE)
  projectId   String?     @map("project_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@map("manifests")
}

// API Key Usage tracking
model ApiKeyUsage {
  id         String   @id @default(cuid())
  apiKeyId   String   @map("api_key_id")
  endpoint   String
  method     String
  statusCode Int      @map("status_code")
  responseTime Int    @map("response_time")
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  apiKey ApiKey @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)

  @@map("api_key_usage")
}

// Resource Usage tracking
model ResourceUsage {
  id         String   @id @default(cuid())
  resourceId String   @map("resource_id")
  apiKeyId   String?  @map("api_key_id")
  action     String   // "download", "view", "access"
  userAgent  String?  @map("user_agent")
  ipAddress  String?  @map("ip_address")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("resource_usage")
}

// Customer Action tracking (for admin audit)
model CustomerAction {
  id         String   @id @default(cuid())
  customerId String   @map("customer_id")
  adminId    String?  @map("admin_id")
  action     String   // "created", "suspended", "activated", "deleted"
  details    Json?    @default("{}")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  admin    Admin?    @relation(fields: [adminId], references: [id])

  @@map("customer_actions")
}

// Enums
enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum AdminStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CustomerStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum ResourceAccessPolicy {
  PUBLIC
  PRIVATE
  PROJECT_ONLY
  CUSTOMERS_ONLY
}

enum ManifestStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}